/*
n, edges, start
ret: cost vector
*/
vector<long long>dijkstra(int n, vector<vector<edg>>& e, int s) {
	vector<long long>a(n, 1e18);
	a[s] = 0;
	using S = pair<long long, int>;
	priority_queue<S, vector<S>, greater<S>>p;
	p.push(S{ 0,s });
	while (!p.empty()) {
		auto [cst, t] = p.top();p.pop();
		if (cst != a[t]) continue;
		for (const auto& [to, wgt] : e[t]) if (a[to] > cst + wgt) {
			a[to] = cst + wgt;
			p.push(P{ a[to],to });
		}
	}
	return a;
}