template<long long mod>
class mymodint {
public:
	long long v;
	mymodint(long long v = 0) { s(v % mod + mod); }
	constexpr static int fn_ = (long long)1e7 + 5;
	constexpr static int iv_ = (long long)1e5 + 5;
	static inline vector<mymodint>fact, comp, iv;
	mymodint pow(long long x) const {
		mymodint b(v), c(1);
		while (x) {
			if (x & 1) c *= b;
			b *= b;
			x >>= 1;
		}
		return c;
	}
	inline mymodint& s(int vv) {
		v = vv < mod ? vv : vv - mod;
		return *this;
	}
	inline mymodint inv()const {
		if (iv.empty()) invinit();
		return v < iv_ ? iv[v] : pow(mod - 2);
	}
	inline mymodint operator-()const { return mymodint() - *this; }
	inline mymodint& operator+=(const mymodint b) { return s(v + b.v); }
	inline mymodint& operator-=(const mymodint b) { return s(v + mod - b.v); }
	inline mymodint& operator*=(const mymodint b) { v = v * b.v % mod; return *this; }
	inline mymodint& operator/=(const mymodint b) { v = v * b.inv().v % mod; return *this; }
	inline mymodint operator+(const mymodint& b) const { return mymodint(v) += b; }
	inline mymodint operator-(const mymodint& b) const { return mymodint(v) -= b; }
	inline mymodint operator*(const mymodint& b) const { return mymodint(v) *= b; }
	inline mymodint operator/(const mymodint& b) const { return mymodint(v) /= b; }
	friend ostream& operator<<(ostream& os, const mymodint& m) {
		return os << m.v;
	}
	friend istream& operator>>(istream& is, mymodint& m) {
		int x; is >> x; m = mymodint(x);
		return is;
	}
	bool operator<(const mymodint& r)const { return v < r.v; }
	bool operator>(const mymodint& r)const { return v > r.v; }
	bool operator<=(const mymodint& r)const { return v <= r.v; }
	bool operator>=(const mymodint& r)const { return v >= r.v; }
	bool operator==(const mymodint& r)const { return v == r.v; }
	bool operator!=(const mymodint& r)const { return v != r.v; }
	explicit operator bool()const { return v; }
	explicit operator int()const { return v; }
	mymodint comb(mymodint k) {
		if (k > *this) return mymodint();
		if (fact.empty()) combinit();
		if (v >= fn_) {
			if (k > *this - k) k = *this - k;
			mymodint tmp(1);
			for (int i = v; i >= v - k.v + 1; i--) tmp *= mymodint(i);
			return tmp * comp[k.v];
		}
		return fact[v] * comp[k.v] * comp[v - k.v];
	}//nCk
	mymodint perm(mymodint k) {
		if (k > *this) return mymodint();
		if (fact.empty()) combinit();
		if (v >= fn_) {
			mymodint tmp(1);
			for (int i = v; i >= v - k.v + 1; i--) tmp *= mymodint(i);
			return tmp;
		}
		return fact[v] * comp[v - k.v];
	}//nPk
	static void combinit() {
		fact.assign(fn_, mymodint());
		fact[0] = 1;
		for (int i = 1; i < fn_; i++) fact[i] = fact[i - 1] * mymodint(i);
		comp.assign(fn_, mymodint());
		comp[fn_ - 1] = fact[fn_ - 1].inv();
		for (int i = fn_ - 2; i >= 0; i--) comp[i] = comp[i + 1] * mymodint(i + 1);
	}
	static void invinit() {
		iv.assign(iv_, mymodint());
		for (int i = 1; i < iv_; i++) iv[i] = mymodint(i).pow(mod - 2);
	}
	template<typename... T>
	static mymodint multicomb(T... args) {
		int len = sizeof...(args);
		mymodint ary[] = { args... };
		mymodint ret = 1, sum = ary[0];
		for (int i = 1;i < len;i++) {
			sum += ary[i];
			ret *= sum.comb(ary[i]);
		}
		return ret;
	}
};
using mint = mymodint<Mod>;