	template<typename T>
	class Update : virtual public LazySegmentTree<T> {
	protected:
		void update_one(Mono<T>& pos, T& x) {
			pos.val = x * pos.len;
			pos.lazy = x;
		}
		void fold(Mono<T>& pos) { pos.lazy = Mono<T>().lazy; }
		void propagate(Mono<T>& par, Mono<T>& child) {
			if (par.lazy >= 0) {
				child.val = par.lazy * child.len;
				child.lazy = par.lazy;
			}
		}
	};